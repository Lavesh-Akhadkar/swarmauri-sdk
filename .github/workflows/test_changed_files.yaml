name: Test Changed Files

on:
  push:
    paths:
      - 'pkgs/**'
  pull_request:
    paths:
      - 'pkgs/**'
  workflow_dispatch:

jobs:
  detect-changed-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Detect changed files and map to tests
        id: detect
        run: |
          # Get changed files
          git fetch origin ${{ github.event.before }}
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^pkgs/')

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Initialize package and test map
          PACKAGE_TEST_MAP=""

          # Iterate through changed files
          for FILE in $CHANGED_FILES; do
            PACKAGE=$(echo "$FILE" | grep -oE '^pkgs/[^/]+' | cut -d/ -f2)
            COMPONENT_NAME=$(basename "$FILE" | sed 's/\.py$//')  # Extract the base name of the file without extension
            TEST_DIR="pkgs/$PACKAGE/tests"  # Test directory for the package

            # Log detected package and component name
            echo "Detected package: $PACKAGE"
            echo "Component name: $COMPONENT_NAME"
            echo "Searching for test files in: $TEST_DIR"

            # Search for test files matching the component name
            if [ -d "$TEST_DIR" ]; then
              MATCHING_TEST_FILES=$(find $TEST_DIR -type f -name "*${COMPONENT_NAME}*_test.py")
              echo "Matching test files: $MATCHING_TEST_FILES"

              for TEST_FILE in $MATCHING_TEST_FILES; do
                RELATIVE_TEST_FILE=$(echo "$TEST_FILE" | sed "s|^pkgs/$PACKAGE/||")  # Relative path from package root
                PACKAGE_TEST_MAP="$PACKAGE_TEST_MAP{\"package\":\"$PACKAGE\",\"test\":\"$RELATIVE_TEST_FILE\"},"
              done
            else
              echo "Warning: Test directory $TEST_DIR does not exist."
            fi
          done

          # Create JSON array for matrix
          if [ -z "$PACKAGE_TEST_MAP" ]; then
            MATRIX="[]"
          else
            MATRIX="[${PACKAGE_TEST_MAP%,}]"
          fi

          echo "Final test matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  run-tests:
    needs: detect-changed-files
    runs-on: ubuntu-latest
    if: needs.detect-changed-files.outputs.matrix != '[]'  # Skip if no tests to run
    strategy:
      fail-fast: false
      matrix:
        package_test: ${{ fromJSON(needs.detect-changed-files.outputs.matrix) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Install package dependencies
        run: |
          cd pkgs/${{ matrix.package_test.package }}
          poetry install --no-cache -vv

      - name: Run specific tests
        run: |
          echo "Running tests for package: ${{ matrix.package_test.package }}"
          echo "Test file: ${{ matrix.package_test.test }}"
          cd pkgs/${{ matrix.package_test.package }}
          poetry run pytest ${{ matrix.package_test.test }}

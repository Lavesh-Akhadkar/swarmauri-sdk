name: Test Changed Files

on:
  push:
    paths:
      - 'pkgs/**'
  pull_request:
    paths:
      - 'pkgs/**'
  workflow_dispatch:

jobs:
  detect-changed-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git fetch --prune --unshallow

      - name: Detect changes and generate test matrix
        run: |
          echo "Comparing changes between previous commit and current commit..."

          # Set the HEAD commit and previous commit for push events
          if [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
              # For pull request events, use the base and head commit from the PR
              BASE_BRANCH=${{ github.event.pull_request.base.ref }}
              HEAD_BRANCH=${{ github.sha }}
          elif [[ $GITHUB_EVENT_NAME == "push" ]]; then
              # For push events, compare HEAD with the previous commit (HEAD~1)
              BASE_BRANCH="HEAD~1"
              HEAD_BRANCH=${{ github.sha }}
          else
              echo "Unsupported event type: $GITHUB_EVENT_NAME"
              exit 1
          fi
          
          # Validate the commits
          git rev-parse $BASE_BRANCH || { echo "Invalid BASE_BRANCH: $BASE_BRANCH"; exit 1; }
          git rev-parse $HEAD_BRANCH || { echo "Invalid HEAD_BRANCH: $HEAD_BRANCH"; exit 1; }
          
          # Run git diff to find changed files
          CHANGED_FILES=$(git diff --name-only $BASE_BRANCH $HEAD_BRANCH | grep '^pkgs/')
          
          if [ -z "$CHANGED_FILES" ]; then
              echo "No changes detected between previous commit and current commit."
              echo "matrix=[]" >> $GITHUB_OUTPUT
              exit 0
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          declare -A PACKAGE_TEST_MAP
          
          for FILE in $CHANGED_FILES; do
              echo "Processing file: $FILE"
              PACKAGE=$(echo "$FILE" | grep -oE '^pkgs/[^/]+' | cut -d/ -f2)
              COMPONENT_NAME=$(basename "$FILE" | sed 's/\.py$//')
          
              if echo "$FILE" | grep -qE '/tests/.*_test\.py$'; then
                  RELATIVE_TEST_FILE=$(echo "$FILE" | sed "s|^pkgs/$PACKAGE/||")
                  PACKAGE_TEST_MAP[$PACKAGE]="${PACKAGE_TEST_MAP[$PACKAGE]} $RELATIVE_TEST_FILE"
              else
                  TEST_DIR="pkgs/$PACKAGE/tests"
                  if [ -d "$TEST_DIR" ]; then
                      MATCHING_TEST_FILES=$(find $TEST_DIR -type f -iname "*${COMPONENT_NAME}*_test.py")
                      for TEST_FILE in $MATCHING_TEST_FILES; do
                          RELATIVE_TEST_FILE=$(echo "$TEST_FILE" | sed "s|^pkgs/$PACKAGE/||")
                          PACKAGE_TEST_MAP[$PACKAGE]="${PACKAGE_TEST_MAP[$PACKAGE]} $RELATIVE_TEST_FILE"
                      done
                  else
                      echo "Warning: Test directory $TEST_DIR does not exist."
                  fi
              fi
          done
          
          MATRIX="["  # Start building the matrix
          for PACKAGE in "${!PACKAGE_TEST_MAP[@]}"; do
              UNIQUE_TEST_FILES=$(echo "${PACKAGE_TEST_MAP[$PACKAGE]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
              MATRIX="$MATRIX{\"package\":\"$PACKAGE\",\"tests\":\"$UNIQUE_TEST_FILES\"},"
          done
          MATRIX="${MATRIX%,}]"  # Remove trailing comma
          
          echo "Final test matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT



  run-tests:
    needs: detect-changed-files
    runs-on: ubuntu-latest
    if: needs.detect-changed-files.outputs.matrix && needs.detect-changed-files.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        package_tests: ${{ fromJSON(needs.detect-changed-files.outputs.matrix) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Install package dependencies
        run: |
          cd pkgs/${{ matrix.package_tests.package }}
          poetry install --no-cache -vv

      - name: Run all tests for the package
        run: |
          echo "Running tests for package: ${{ matrix.package_tests.package }}"
          echo "Test files: ${{ matrix.package_tests.tests }}"
          cd pkgs/${{ matrix.package_tests.package }}
          poetry run pytest ${{ matrix.package_tests.tests }}

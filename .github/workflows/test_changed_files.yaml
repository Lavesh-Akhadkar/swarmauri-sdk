name: Test Changed Files

on:
  push:
    paths:
      - 'pkgs/**'
  pull_request:
    paths:
      - 'pkgs/**'
  workflow_dispatch:

jobs:
  detect-changed-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history

      - name: Determine base branch and head branch
        id: determine-branches
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
          elif [ "${{ github.event_name }}" == "push" ]; then
            BASE_BRANCH="${{ github.event.before }}"
            HEAD_BRANCH="${{ github.sha }}"
          else
            BASE_BRANCH="origin/${{ github.ref_name }}"
            HEAD_BRANCH="origin/${{ github.ref_name }}"
          fi

          echo "Base branch: $BASE_BRANCH"
          echo "Head branch: $HEAD_BRANCH"
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_ENV
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_ENV

      - name: Fetch branches or commits
        run: |
          if [ "$BASE_BRANCH" == "$HEAD_BRANCH" ]; then
            echo "Warning: Base and head branches are the same. This may lead to no changes being detected."
          fi
          if [[ $BASE_BRANCH =~ ^[a-f0-9]{40}$ ]]; then
            git fetch origin $HEAD_BRANCH
          else
            git fetch origin $BASE_BRANCH
            git fetch origin $HEAD_BRANCH
          fi

      - name: Detect changed files and group tests by package
        id: detect
        run: |
          # Compare the source and target branches or commits
          CHANGED_FILES=$(git diff --name-only $BASE_BRANCH...$HEAD_BRANCH | grep '^pkgs/')

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Initialize a dictionary to group test files by package
          declare -A PACKAGE_TEST_MAP

          # Iterate through changed files
          for FILE in $CHANGED_FILES; do
            PACKAGE=$(echo "$FILE" | grep -oE '^pkgs/[^/]+' | cut -d/ -f2)
            COMPONENT_NAME=$(basename "$FILE" | sed 's/\.py$//')  # Extract the base name of the file without extension

            # Check if the file itself is a test file
            if echo "$FILE" | grep -qE '/tests/.*_test\.py$'; then
              # Directly add the test file to the package's test list
              RELATIVE_TEST_FILE=$(echo "$FILE" | sed "s|^pkgs/$PACKAGE/||")  # Relative path from package root
              PACKAGE_TEST_MAP[$PACKAGE]="${PACKAGE_TEST_MAP[$PACKAGE]} $RELATIVE_TEST_FILE"
            else
              # Search for test files related to the changed source file
              TEST_DIR="pkgs/$PACKAGE/tests"

              if [ -d "$TEST_DIR" ]; then
                MATCHING_TEST_FILES=$(find $TEST_DIR -type f -iname "*${COMPONENT_NAME}*_test.py")
                for TEST_FILE in $MATCHING_TEST_FILES; do
                  RELATIVE_TEST_FILE=$(echo "$TEST_FILE" | sed "s|^pkgs/$PACKAGE/||")  # Relative path from package root
                  PACKAGE_TEST_MAP[$PACKAGE]="${PACKAGE_TEST_MAP[$PACKAGE]} $RELATIVE_TEST_FILE"
                done
              else
                echo "Warning: Test directory $TEST_DIR does not exist."
              fi
            fi
          done

          # Generate the final JSON matrix by grouping tests by package
          MATRIX="["
          for PACKAGE in "${!PACKAGE_TEST_MAP[@]}"; do
            UNIQUE_TEST_FILES=$(echo "${PACKAGE_TEST_MAP[$PACKAGE]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
            MATRIX="$MATRIX{\"package\":\"$PACKAGE\",\"tests\":\"$UNIQUE_TEST_FILES\"},"
          done
          MATRIX="${MATRIX%,}]"  # Remove trailing comma and close JSON array

          echo "Final test matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

name: Create New Component from Feature Request

on:
  issues:
    types:
      - opened

jobs:
  create-component:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check Issue Author Membership
        id: check-membership
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract the issue author's username
          AUTHOR_LOGIN="${{ github.event.issue.user.login }}"
          REPO_NAME="${{ github.repository }}"

          # Check if the user is a member of the repository
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/orgs/<org-name>/members/${AUTHOR_LOGIN}")

          if [ "$STATUS" -ne 204 ]; then
            echo "User $AUTHOR_LOGIN is not a team member. Exiting workflow."
            exit 1
          else
            echo "User $AUTHOR_LOGIN is a team member. Proceeding with workflow."
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Clean Issue Title and Convert to PascalCase
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
        run: |
          # Remove "[Feature Request]:", trim spaces, and convert to PascalCase
          CLEANED_TITLE=$(echo "${ISSUE_TITLE}" | sed 's/\[Feature Request\]://g' | sed 's/^ *//;s/ *$//' | awk '{for (i=1; i<=NF; i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1' OFS='')

          # Print the cleaned title
          echo "Cleaned Title (PascalCase): $CLEANED_TITLE"

          # Set the cleaned title as an environment variable for later steps
          echo "CLEANED_TITLE=$CLEANED_TITLE" >> $GITHUB_ENV

      - name: Create Component Folder
        env:
          CLEANED_TITLE: ${{ env.CLEANED_TITLE }}
          AUTHOR_NAME: ${{ github.event.issue.user.login }}
          AUTHOR_EMAIL: ${{ github.event.issue.user.login }}@example.com
        run: |
          python scripts/create_component.py \
            --template .config/component_generator/templates/component \
            --output components/${{ env.CLEANED_TITLE }} \
            --placeholders package_name=${{ env.CLEANED_TITLE }} author_name=${{ env.AUTHOR_NAME }} author_email=${{ env.AUTHOR_EMAIL }} year=$(date +%Y)

      - name: List Directory Contents
        run: |
          echo "Directory contents after creating the package:"
          ls -R
          cat components/${{ env.CLEANED_TITLE }}/pyproject.toml
